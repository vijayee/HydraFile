// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, HydraFile, fs, mime, path, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('lodash');

  fs = require('fs');

  EventEmitter = require("events").EventEmitter;

  path = require('path');

  mime = require('mime');

  HydraFile = (function(_super) {
    __extends(HydraFile, _super);

    HydraFile.prototype.chunkSize = 1000;

    HydraFile.prototype.blockSize = 16;

    HydraFile.prototype.file = null;

    function HydraFile(file, db, options) {
      var stat;
      HydraFile.__super__.constructor.apply(this, arguments);
      _.bindAll(this, 'retreivedFromDb', 'incrementStoredChunks', 'chunkRetrieved', 'blockRetreived');
      if ('string' === !typeof file) {
        throw 'invalid file path';
      }
      this.stored = 0;
      this.retrieved = 0;
      this.db = db;
      stat = fs.statSync(file);
      this.file = fs.readFileSync(file);
      this.manifest = {
        name: path.basename(file),
        size: stat.size,
        lastModifiedDate: stat.mtime,
        type: mime.lookup(file),
        content: []
      };
    }

    HydraFile.prototype.retrieveManifest = function() {
      var b, chunk, i, n, _i, _ref, _ref1, _results;
      n = 0;
      b = 0;
      this.keyfix = String(this.manifest.name + '-' + this.manifest.lastModifiedDate);
      this.manifest.chunks = Math.floor(this.file.length / this.chunkSize);
      if (this.file.length % this.chunkSize !== 0) {
        this.manifest.chunks++;
      }
      _results = [];
      for (i = _i = 0, _ref = this.file.length, _ref1 = this.chunkSize; _ref1 > 0 ? _i <= _ref : _i >= _ref; i = _i += _ref1) {
        chunk = {
          id: n,
          block: b,
          start: i,
          end: i + this.chunkSize,
          key: String(this.keyfix + '-block-' + b + '-' + 'chunk-' + n++)
        };
        this.manifest.content.push(chunk);
        this.db.put({
          _id: chunk.key,
          buffer: this.file.slice(i, i + this.chunkSize)
        }, this.incrementStoredChunks);
        this.manifest.blocks = b + 1;
        if (n % this.blockSize === 0) {
          _results.push(b++);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    HydraFile.prototype.incrementStoredChunks = function(err) {
      if (err) {
        if (err.status === 409) {
          this.stored++;
        } else {
          this.emit('error', err);
        }
      } else {
        this.stored++;
      }
      if (this.stored === this.manifest.chunks) {
        return this.emit('stored', this.manifest);
      }
    };

    HydraFile.prototype.createFileFromDB = function() {
      var chunk, _i, _len, _ref, _results;
      this.file = [];
      _ref = this.manifest.content;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        chunk = _ref[_i];
        _results.push(this.db.get(chunk.key, this.retreivedFromDb));
      }
      return _results;
    };

    HydraFile.prototype.createFileFromDBByBlock = function() {
      var block, manifestBlock, options, that, _i, _ref, _results;
      _results = [];
      for (block = _i = 0, _ref = this.manifest.content.blocks; 0 <= _ref ? _i < _ref : _i > _ref; block = 0 <= _ref ? ++_i : --_i) {
        manifestBlock = _.where(this.manifest.content, {
          block: block
        });
        console.log(manifestBlock);
        options = {
          start: manifestBlock[0].key,
          end: manifestBlock[manifestBlock.length - 1].key
        };
        that = this;
        _results.push(this.db.createReadStream(options).on('data', function(data) {
          return that.retreivedFromDb(null, data.value, data.key);
        }));
      }
      return _results;
    };

    HydraFile.prototype.retreivedFromDb = function(err, value) {
      if (this.file == null) {
        this.file = [];
        this.file.push(value.buffer);
      } else {
        this.file.push(value.buffer);
      }
      if (this.file.length >= this.manifest.content.length) {
        return this.emit('created', new Buffer(this.file));
      }
    };

    HydraFile.prototype.chunkRetrieved = function(err, chunk) {
      if (err != null) {
        console.err(err);
      }
      if (chunk != null) {
        return this.emit('chunk', chunk);
      }
    };

    HydraFile.prototype.retreiveChunk = function(id) {
      var key, keys;
      keys = _.pluck(this.manifest.content, 'key');
      key = _.filter(keys, function(key) {
        var regex;
        regex = new RegExp('-chunk-' + id + '$');
        return regex.test(String(key));
      })[0];
      return this.db.get(key, this.chunkRetrieved);
    };

    HydraFile.prototype.blockRetreived = function(err, block) {
      if (err != null) {
        console.err(err);
      }
      if (block != null) {
        return this.emit('block', block);
      }
    };

    HydraFile.prototype.retreiveBlock = function(id) {
      var blocks, keys, options;
      keys = _.pluck(this.manifest.content, 'key');
      blocks = _.filter(keys, function(key) {
        var regex;
        regex = new RegExp('-block-' + id + '-chunk-');
        return regex.test(String(key));
      });
      options = {
        keys: blocks
      };
      return this.db.allDocs(options, this.blockRetreived);
    };

    HydraFile.prototype.getFile = function() {
      return new Buffer(this.file);
    };

    return HydraFile;

  })(EventEmitter);

  module.exports.HydraFile = HydraFile;

}).call(this);

//# sourceMappingURL=HydraFile.map
